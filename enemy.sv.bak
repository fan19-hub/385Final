module  enemy ( input         Clk,                // 50 MHz clock
                             Reset,              // Active-high reset signal
                             frame_clk,          // The clock indicating a new frame (~60Hz)
               input [9:0]   DrawX, DrawY,       // Current pixel coordinates
               output logic  is_ball,
					output logic[15:0]  relative_address					// Whether current pixel belongs to ball or background
              );
    
    parameter [9:0] Screen_X_Center = 10'd320;  // Center position on the X axis
    parameter [9:0] Screen_Y_Center = 10'd240;  // Center position on the Y axis
    parameter [9:0] Screen_X_Min = 10'd0;       // Leftmost point on the X axis
    parameter [9:0] Screen_X_Max = 10'd639;     // Rightmost point on the X axis
    parameter [9:0] Screen_Y_Min = 10'd0;       // Topmost point on the Y axis
    parameter [9:0] Screen_Y_Max = 10'd479;     // Bottommost point on the Y axis
    parameter [9:0] Ball_X_Step = 10'd5;      // Step size on the X axis
    parameter [9:0] Ball_Y_Step = 10'd5;      // Step size on the Y axis
    parameter [9:0] Ball_X_Size = 10'd30;        // Ball size
    parameter [9:0] Ball_Y_Size = 10'd46;        // Ball size
    parameter [9:0] zero=10'd0;

    logic [9:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion;
    logic [9:0] Ball_X_Pos_in,  Ball_Y_Pos_in ;

    //////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            Ball_X_Pos <= Screen_X_Center;
            Ball_Y_Pos <= Screen_Y_Center;
            Ball_X_Motion <= 10'd0;
            Ball_Y_Motion <= 10'd0;
        end
        else
        begin
            Ball_X_Pos <= Ball_X_Pos_in;
            Ball_Y_Pos <= Ball_Y_Pos_in;
//            Ball_X_Motion <= Ball_X_Motion_in;
//            Ball_Y_Motion <= Ball_Y_Motion_in;
        end
    end
    //////// Do not modify the always_ff blocks. ////////
    
    // You need to modify always_comb block.
    always_comb
    begin
        // By default, keep motion and position unchanged
        Ball_X_Pos_in = Ball_X_Pos;
        Ball_Y_Pos_in = Ball_Y_Pos;
		  Ball_X_Motion=10'd0;
		  Ball_Y_Motion=10'd0;
//        Ball_X_Motion_in = Ball_X_Motion;
//        Ball_Y_Motion_in = Ball_Y_Motion;
        
        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge)
        begin
            // Be careful when using comparators with "logic" datatype because compiler treats 
            //   both sides of the operator as UNSIGNED numbers.
            // e.g. Ball_Y_Pos - Ball_X_Size <= Screen_Y_Min 
            // If Ball_Y_Pos is 0, then Ball_Y_Pos - Ball_X_Size will not be -4, but rather a large positive number.
            case (keycode)
					8'h04: // A is pressed left
					begin
								 Ball_X_Motion = (~(Ball_X_Step)+1'b1);
								 Ball_Y_Motion = zero;
					end
					8'h07: // D is pressed right
					begin
								 Ball_X_Motion = Ball_X_Step;
								 Ball_Y_Motion = zero;
					end
					8'h1a: // W is pressed up
					begin
								 Ball_Y_Motion = (~(Ball_Y_Step) + 1'b1);
								 Ball_X_Motion = zero;
					end
					8'h16: // S is pressed down
					begin
								 Ball_Y_Motion = Ball_Y_Step;
								 Ball_X_Motion = zero;
					end
					default: 
					begin
								 Ball_Y_Motion = zero;
								 Ball_X_Motion = zero;
					end
				endcase
				if( Ball_Y_Pos + Ball_Y_Size >= Screen_Y_Max)  // Ball is at the bottom edge, BOUNCE!
				begin
                Ball_Y_Motion = 10'd0;  // 2's complement.  
					 Ball_X_Motion = 10'd0;
				end
            else if ( Ball_Y_Pos <= Screen_Y_Min + Ball_Y_Size)  // Ball is at the top edge, BOUNCE!
				begin
                Ball_Y_Motion = 10'd0;
					 Ball_X_Motion = 10'd0;
				end
            // TODO: Add other boundary detections and handle keypress here.
            else if( Ball_X_Pos + Ball_X_Size >= Screen_X_Max)  // Ball is at the right edge, BOUNCE!
				begin
                Ball_X_Motion = 10'd0; 
					 Ball_Y_Motion = 10'd0;
				end
            else if ( Ball_X_Pos <= Screen_X_Min +  Ball_X_Size) // Ball is at the left edge, BOUNCE!
				begin
                Ball_X_Motion = 10'd0;
					 Ball_Y_Motion = 10'd0;
				end
					 
            // Update the ball's position with its motion
				Ball_X_Pos_in = Ball_X_Pos + Ball_X_Motion;
				Ball_Y_Pos_in = Ball_Y_Pos + Ball_Y_Motion;

        end
		  
    end
    
    
    // Compute whether the pixel corresponds to ball or background
    /* Since the multiplicants are required to be signed, we have to first cast them
       from logic to int (signed by default) before they are multiplied. */
    int DistX, DistY;
    assign DistX = DrawX - Ball_X_Pos;
    assign DistY = DrawY - Ball_Y_Pos;
    //60*93
    always_comb begin
        if ( DistX*DistX < 900 &&  DistY*DistY < 2116  ) 
            is_ball = 1'b1;
        else
            is_ball = 1'b0;
        relative_address=9'b0;
        if(is_ball)
            relative_address=(DrawX-Ball_X_Pos+Ball_X_Size)+ (DrawY- Ball_Y_Pos+Ball_Y_Size)*10'd60; 
	 end

    
    
endmodule
