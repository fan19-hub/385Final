//------------------------------------------------------------------------------

//------------------------------------------------------------------------------


module ISDU (   input logic         frame_clk,Clk,
									Reset,left,attack,thump,
					input [7:0]   keycode,keycode_2,
									

				output logic [7:0]   state
									


				);
   logic[15:0] key;
		 `timescale 10ms/1ms
		 parameter p=500;
	assign key={keycode_2,keycode};
	enum logic [10:0] { 
						budong1,
						budong1_1,
						budong1_2,
						budong1_3,
						budong1_4,
						budong1_5,
						budong1_6,
						budong1_7,
						budong1_8,
						budong1_9,
						budong2,
						budong2_1,
						budong2_2,
						budong2_3,
						budong2_4,
						budong2_5,
						budong2_6,
						budong2_7,
						budong2_8,
						budong2_9,
						budong3,
						budong3_1,
						budong3_2,
						budong3_3,
						budong3_4,
						budong3_5,
						budong3_6,
						budong3_7,
						budong3_8,
						budong3_9,
						l_budong,
						l_budong_1,
						l_budong_2,
						l_budong_3,
						l_budong_4,
						l_budong_5,
						l_budong_6,
						attack_11_1,
						attack_11_2,
						attack_11_3,
						attack_11_4,
						attack_12_1,
						attack_21_1,
						attack_21_2,
						attack_22_1,
						attack_23_1,
						attack_23_2
						}  State, Next_state;   // Internal state logic	
	always_ff @ (posedge frame_clk)
	begin
		if (Reset) 
			State <= budong1;
		else 
			State <= Next_state;
	end
   
	always_ff @ (posedge frame_clk)
	begin 
		// Default next state is staying at current state
		Next_state = State;
//		state=8'h01;
		// Default controls signal values
	
	 state=8'h01;
		// Assign next state
		unique case (State)
			budong1: 
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
				Next_state=budong1_1;
			end
			budong1_1:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_2;
			end
			budong1_2:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_3;
				end
			budong1_3:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_4;
				end
			budong1_4:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_5;
				end
			budong1_5:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_6;
				end
			budong1_6:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_7;
				end
			budong1_7:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_8;
				end
			budong1_8:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1_9;
				end
			budong1_9:
			begin
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2;	
					end
			budong2 : 
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
					Next_state = budong2_1;
			budong2_1:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_2;
			budong2_2:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_3;
			budong2_3:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_4;
			budong2_4:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_5;
			budong2_5:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_6;
			budong2_6:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_7;
			budong2_7:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_8;
			budong2_8:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong2_9;
			budong2_9:
			if(attack==1'b1)
			Next_state=attack_11_1;
		else	if(left==1'b1)
				Next_state=l_budong;
			else
			   Next_state=budong1;
			budong3: 
			Next_state = budong3_1;
			budong3_1:
			   Next_state=budong3_2;
			budong3_2:
			   Next_state=budong3_3;
			budong3_3:
			   Next_state=budong3_4;
			budong3_4:
			   Next_state=budong3_5;
			budong3_5:
			   Next_state=budong3_6;
			budong3_6:
			   Next_state=budong3_7;
			budong3_7:
			   Next_state=budong3_8;
			budong3_8:
			   Next_state=budong3_9;
			budong3_9:
			   Next_state=budong1;
//						default : ;
//		endcase
//		else 
//		begin 
//		state=8'h04;
//		State=
//		unique case(State)
			l_budong:
						if(left==1'b0)
				Next_state=budong1;
			else
				Next_state=l_budong_1;
			l_budong_1:
			if(left==1'b0)
				Next_state=budong1;
			else
				Next_state=l_budong_2;
			l_budong_2:
			if(left==1'b0)
				Next_state=budong1;
			else
				Next_state=l_budong_3;
			l_budong_3:
			if(left==1'b0)
				Next_state=budong1;
			else
				Next_state=l_budong_4;
			l_budong_4:
			if(left==1'b0)
				Next_state=budong1;
			else
				Next_state=l_budong_5;
			l_budong_5:
			if(left==1'b0)
				Next_state=budong1;
			else
				Next_state=l_budong_6;
			l_budong_6:
			if(left==1'b0)
				Next_state=budong1;
			else
				Next_state=l_budong;
				
				
		  	attack_11_1:
			#p
			Next_state=attack_11_2;
			
			attack_11_2:
			#p
			Next_state=attack_11_3;
			attack_11_3:
			#p
			Next_state=attack_11_4;
			attack_11_4:
			#p
			Next_state=attack_12_1;
			attack_12_1:
			#p
			if(key===16'h0d)
				Next_state=attack_21_1;
			else
				Next_state=budong1;
			attack_21_1:
			#p
			Next_state=attack_21_2;
			attack_21_2:
			#p
			Next_state=attack_22_1;
			attack_22_1:
			#p
			Next_state=attack_23_1;
			attack_23_1:
			#p
			Next_state=attack_23_2;
			attack_23_2:
			#p 
			if(key===16'h0d)
				Next_state=attack_21_1;
			else
				Next_state=budong1;
//			S_32 : 
//				case (Opcode)
//					4'b0001:Next_state = S_01;
//					4'b0101:Next_state = S_05;
//					4'b1001:Next_state = S_09;
//					4'b0110:Next_state = S_06;
//					4'b0111:Next_state = S_07;
//					4'b0100:Next_state = S_04;
//					4'b1100:Next_state = S_12;
//					4'b1101:Next_state = PauseIR1;
//					4'b0000:Next_state = S_00;
//			budong3:
//					Next_state=budong4;
//			budong4:
//					Next_state=budong5;
//			budong5:
//					Next_state=budong1;			

//			S_00:
//				begin
//				if (BEN==1)
//					Next_state=S_22;
//				else 
//					Next_state=S_18;
//				
//				end


			default : ;

		endcase

		// Assign control signals based on current state
		case (State)

			budong1: 
					state=8'h01;
			budong1_1 : 
					state=8'h01;
			budong1_2 : 
					state=8'h01;
			budong1_3 : 
					state=8'h01;
			budong1_4 : 
					state=8'h01;
			budong1_5 : 
					state=8'h01;
			budong1_6 : 
					state=8'h01;
			budong1_7 : 
					state=8'h01;
			budong1_8 : 
					state=8'h01;
			budong1_9 : 
					state=8'h01;
			budong2_1 : 
					state=8'h02;
			budong2:
					state=8'h02;
			budong2_2 : 
					state=8'h02;
			budong2_3:
					state=8'h02;
			budong2_4:
					state=8'h02;
			budong2_5 : 
					state=8'h02;
			budong2_6:
					state=8'h02;
			budong2_7:
					state=8'h02;
			budong2_8:
					state=8'h02;
			budong2_9:
					state=8'h02;
			budong3: 
					state=8'h03;
			budong3_1 : 
					state=8'h03;
			budong3_2 : 
					state=8'h03;
			budong3_3 : 
					state=8'h03;
			budong3_4 : 
					state=8'h03;
			budong3_5 : 
					state=8'h03;
			budong3_6 : 
					state=8'h03;
			budong3_7 : 
					state=8'h03;
			budong3_8 : 
					state=8'h03;
			budong3_9 : 
					state=8'h03;
			l_budong:
					state=8'h04;
			l_budong_1:
					state=8'h04;
			l_budong_2:
					state=8'h04;
			l_budong_3:
					state=8'h04;
			l_budong_4:
					state=8'h04;
			l_budong_5:
					state=8'h04;
			l_budong_6:
					state=8'h04;
			attack_11_1:
					state=8'h05;
			attack_11_2:
					state=8'h05;
			attack_11_3:
					state=8'h05;	
			attack_11_4:
					state=8'h05;
			attack_12_1:
					state=8'h06;
			attack_21_1:
					state=8'h07;	
			attack_21_2:
					state=8'h07;
			attack_22_1:
					state=8'h08;
			attack_23_1:
					state=8'h09;	
			attack_23_2:
					state=8'h09;

//			budong3:
//			state=3;
//			budong4:
//			state=4;
//			budong5:
//			state=5;

			default : ;

		endcase
	end 

	 // These should always be active

endmodule
